import { AttributeValue } from "@aws-sdk/client-dynamodb";
import { existsSync as fileExistsSync, readFileSync } from "fs";
import { StopWatch } from 'stopwatch-node';
import { parseItemsFromJson } from "./ItemsJsonConverter";
import runPartiQL from './runPartiQL';
import saveIntoPostgres, { SaveToPGResult } from './saveIntoPostgres';


export function execute(args: string[]) {

    (async () => {

        let ql;
        try {
            ql = getQLFromArgs(args);
        } catch (e) {
            console.error(e);
            return;
        }

        const sw = new StopWatch('dpp timer');
        const items: { [key: string]: AttributeValue; }[] = await doRunQL(sw, ql);


        await doPGLoading(sw, items);

        sw.prettyPrint();

    })();
}

export function load(args: string[]) {
    (async () => {

        let itemsFilePath;
        try {
            itemsFilePath = getItemsFilePathFromArgs(args);
        } catch (e) {
            console.error(e);
            return;
        }

        const sw = new StopWatch('dpp-loader timer');
        const itemsFileContent: string = readFileSync(itemsFilePath, { encoding: 'utf8' });
        const items: { [key: string]: AttributeValue; }[] = parseItemsFromJson(itemsFileContent);
        console.log(items.length + " items in items file");


        await doPGLoading(sw, items);
        sw.prettyPrint();

    })();
}

async function doPGLoading(sw: StopWatch, items: { [key: string]: AttributeValue; }[]) {
    sw.start("Parse results and save to Postgres");
    const saveToPGResult: SaveToPGResult = await saveIntoPostgres(items);
    console.log(`\nAll the results have been saved to ${saveToPGResult.tableName} . Num of records is ${saveToPGResult.numOfRecords}`);
    if (saveToPGResult.columnRenameRecords && Object.keys(saveToPGResult.columnRenameRecords).length) {
        console.log(`Note some columns have been renamed in Postgres for some reason: ${saveToPGResult.columnRenameRecords}`);
    }
    sw.stop();
}

async function doRunQL(sw: StopWatch, ql: any) {
    sw.start("Run PartiQL");
    console.log("Your QL is:  " + ql);
    const items: { [key: string]: AttributeValue; }[] = await runPartiQL(ql);
    console.log(items.length + " items in the QL's result");
    sw.stop();
    return items;
}

/**
 * throws string if not found
 * @param args 
 * @returns 
 */
export function getQLFromArgs(args: string[]) {
    if (!args || args.length == 0) {
        throw 'Please input a double-quoted PartiQL like "select * from ..." ';
    }

    const ql: string = args[0];

    if (ql.split(" ")[0].toLowerCase() !== "select") {
        throw 'Only "select" statements are supported';
    }

    return ql;

}

/**
 * throws string if not found
 * @param args 
 * @returns 
 */
export function getItemsFilePathFromArgs(args: string[]): any {
    if (!args || args.length == 0) {
        throw 'Please input the path of items file generated by dpp ';
    }
    const filePath: string = args[0];

    if (fileExistsSync(filePath)) {
        return filePath;
    } else {
        throw `${filePath} doesn't seem to be existing`;
    }

}

